<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用指南</title>
    <url>/2021/03/25/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>本文记录一些常用指令。</p>
<span id="more"></span>

<h1 id="创建一篇新文章。"><a href="#创建一篇新文章。" class="headerlink" title="创建一篇新文章。"></a>创建一篇新文章。</h1><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">hexo new &lt;title&gt;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>入门</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2021/03/24/Pandas%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<hr>
<h2 id="Pandas使用"><a href="#Pandas使用" class="headerlink" title="Pandas使用"></a>Pandas使用</h2><p><strong>一般约定：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>
<h1 id="对pandas库的理解"><a href="#对pandas库的理解" class="headerlink" title="对pandas库的理解"></a>对pandas库的理解</h1><ul>
<li>两个基本数据类型：<strong>Series</strong>,<strong>DataFrame</strong></li>
<li><strong>Series</strong>提供一维数据类型</li>
<li><strong>DataFrame</strong>提供高维数据类型</li>
</ul>
<span id="more"></span>

<h1 id="Series类型"><a href="#Series类型" class="headerlink" title="Series类型"></a>Series类型</h1><p>由一组数据及其索引构成。<br><strong>成员：</strong></p>
<ul>
<li><strong>index</strong>，索引</li>
<li><strong>values</strong>，数据，ndarray类型</li>
</ul>
<p>既有自定义索引，又有如同数组的索引。<br><strong>创建方法：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">列表创建</span><br><span class="line">pd.series(<span class="built_in">list</span>,index=<span class="built_in">list</span>)</span><br><span class="line">数组创建</span><br><span class="line">pd.series(ndarray,index=ndarray)</span><br><span class="line">标量创建</span><br><span class="line">pd.series(data,index=<span class="built_in">list</span>)</span><br><span class="line">Python字典创建</span><br><span class="line">pd.series(<span class="built_in">dict</span>)</span><br><span class="line">也可以通过index将先后顺序重新排序：</span><br><span class="line">pd.series(<span class="built_in">dict</span>，index=<span class="built_in">list</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Series基本操作"><a href="#Series基本操作" class="headerlink" title="Series基本操作"></a>Series基本操作</h2><p><strong>基本操作与数组和字典类似。</strong><br> <strong>name属性：</strong><br> <strong>series</strong>存在<strong>name</strong>成员，可以对这个序列命名。<br><strong>index</strong>,<strong>values</strong>也都存在<strong>name</strong>成员，打印的时候可以显示在表头</p>
<h3 id="对齐操作"><a href="#对齐操作" class="headerlink" title="对齐操作"></a>对齐操作</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">当出现series+series之类运算，会采用索引对齐相加，生成新的series。</span><br></pre></td></tr></table></figure>
<h1 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h1><p>共用相同索引的多条列组成，类似表格。<br><strong>成员：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.columns</span><br></pre></td></tr></table></figure>
<h2 id="DataFrame基本操作"><a href="#DataFrame基本操作" class="headerlink" title="DataFrame基本操作"></a>DataFrame基本操作</h2><h3 id="汇总函数"><a href="#汇总函数" class="headerlink" title="汇总函数"></a>汇总函数</h3><p><strong>截断</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">返回表或者序列的前n行，默认参数为<span class="number">5</span></span><br><span class="line">df.head(n)</span><br><span class="line">返回表或者序列的后n行，默认参数为<span class="number">5</span></span><br><span class="line">df.tail(n)</span><br></pre></td></tr></table></figure>
<p><strong>基本信息</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.info()</span><br><span class="line">df.describe()</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>线程相关函数</title>
    <url>/2021/03/27/%E7%BA%BF%E7%A8%8B%E7%9B%B8%E5%85%B3%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h1 id="pthread-create"><a href="#pthread-create" class="headerlink" title="pthread_create"></a>pthread_create</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_create</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">pthread_t</span> *<span class="keyword">restrict</span> tidp,   <span class="comment">//指向线程标识符的指针。</span></span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">const</span> <span class="keyword">pthread_attr_t</span> *<span class="keyword">restrict</span> attr,  <span class="comment">//线程属性，默认为NULL</span></span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">void</span> *(*start_rtn)(<span class="keyword">void</span> *), <span class="comment">//线程运行函数的起始地址</span></span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">void</span> *<span class="keyword">restrict</span> arg <span class="comment">//运行函数的参数。</span></span></span></span><br><span class="line"><span class="function"><span class="params">                  )</span></span>;</span><br></pre></td></tr></table></figure>

<h1 id="pthread-join"><a href="#pthread-join" class="headerlink" title="pthread_join"></a>pthread_join</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_join</span><span class="params">(<span class="keyword">pthread_t</span> thread, <span class="comment">//调用的线程标识符</span></span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">void</span> **retval)</span></span>;<span class="comment">//用户定义的指针，用来存储被等待线程的返回值。</span></span><br></pre></td></tr></table></figure>

<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>当前线程会处于阻塞状态，直到被调用的线程结束后，当前线程重新开始执行。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><strong>注意</strong>下面程序的输出顺序是不能确定的：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">print1</span><span class="params">(<span class="keyword">void</span>* data)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">print2</span><span class="params">(<span class="keyword">void</span>* data)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;2 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">print3</span><span class="params">(<span class="keyword">void</span>* data)</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;3 &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">pthread_t</span> t,t1,t2;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">pthread_create</span>(&amp;t,<span class="number">0</span>,print1,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">pthread_create</span>(&amp;t1,<span class="number">0</span>,print2,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">pthread_create</span>(&amp;t2,<span class="number">0</span>,print3,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">pthread_join</span>(t,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">pthread_join</span>(t1,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">pthread_join</span>(t2,<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>创造的多个线程会抢占CPU资源，使得输出不能确定。</li>
<li>在执行到对应线程的pthread_join(  )函数时，这个线程可能还没来得及运行就已经结束了。</li>
</ul>
<p>最好将pthread_create(  )与pthread_join(  )搭配使用。</p>
<p>改写为（按顺序输出的形式）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pthread_create</span>(&amp;t, <span class="number">0</span>, print1, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">pthread_join</span>(t, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">pthread_create</span>(&amp;t1, <span class="number">0</span>, print2, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">pthread_join</span>(t1, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">pthread_create</span>(&amp;t2, <span class="number">0</span>, print3, <span class="literal">NULL</span>);</span><br><span class="line"><span class="built_in">pthread_join</span>(t2, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li>[1] [多线程之pthread_create（）函数](<a href="https://blog.csdn.net/wushuomin/article/details/80051295%EF%BC%89">https://blog.csdn.net/wushuomin/article/details/80051295）</a></li>
</ul>
]]></content>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>模型评估与选择</title>
    <url>/2021/03/29/%E6%A8%A1%E5%9E%8B%E9%80%89%E6%8B%A9%E4%B8%8E%E9%AA%8C%E8%AF%81/</url>
    <content><![CDATA[<h1 id="经验误差与过拟合"><a href="#经验误差与过拟合" class="headerlink" title="经验误差与过拟合"></a>经验误差与过拟合</h1><p>训练集上的误差称为“训练误差”(training error),经验误差(empirical error).</p>
<p>新样本上的误差称为“泛化误差”（generalization error)</p>
<h2 id="欠拟合"><a href="#欠拟合" class="headerlink" title="欠拟合"></a>欠拟合</h2><p>对训练样本的一般特质尚未学习完全</p>
<p><strong>造成原因：</strong></p>
<ul>
<li><p>学习能力低下</p>
</li>
<li></li>
</ul>
<h2 id="过拟合"><a href="#过拟合" class="headerlink" title="过拟合"></a>过拟合</h2><p>误把训练样本的一些自身特性当作潜在规律。</p>
<p><strong>造成原因：</strong></p>
<ul>
<li>学习能力过于强大</li>
<li></li>
</ul>
<h1 id="模型评估方法"><a href="#模型评估方法" class="headerlink" title="模型评估方法"></a>模型评估方法</h1><h2 id="留出法"><a href="#留出法" class="headerlink" title="留出法"></a>留出法</h2><h2 id="交叉验证法"><a href="#交叉验证法" class="headerlink" title="交叉验证法"></a>交叉验证法</h2><h2 id="自助法"><a href="#自助法" class="headerlink" title="自助法"></a>自助法</h2>]]></content>
      <tags>
        <tag>西瓜书</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
</search>
